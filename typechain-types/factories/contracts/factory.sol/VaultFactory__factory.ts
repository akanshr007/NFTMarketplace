/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  VaultFactory,
  VaultFactoryInterface,
} from "../../../contracts/factory.sol/VaultFactory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_Dividend",
        type: "address",
      },
    ],
    name: "dividendCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "DividendAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "addOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_creator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    name: "createDividend",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_Dividend",
        type: "address",
      },
      {
        internalType: "address",
        name: "_NFT",
        type: "address",
      },
      {
        internalType: "address",
        name: "_dataAccessAdmin",
        type: "address",
      },
      {
        internalType: "address",
        name: "_dividendToken",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_Dividend",
        type: "address",
      },
    ],
    name: "updateDividendTemplate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "viewDividenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a8c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100f7578063d037e05114610108578063e429187114610131578063f2fde38b1461015a578063f8c8765e1461016d57600080fd5b8063024759c6146100985780630d7c7811146100ad578063715018a6146100dc5780638be44685146100e4575b600080fd5b6100ab6100a636600461094f565b610180565b005b6100c06100bb36600461098b565b61022f565b6040516001600160a01b03909116815260200160405180910390f35b6100ab610401565b6100ab6100f23660046109c7565b610415565b6033546001600160a01b03166100c0565b6100c06101163660046109e9565b6069602052600090815260409020546001600160a01b031681565b6100c061013f3660046109e9565b6000908152606960205260409020546001600160a01b031690565b6100ab6101683660046109c7565b61047a565b6100ab61017b366004610a02565b6104f3565b336000908152606a602052604090205460ff166101c95760405162461bcd60e51b81526020600482015260026024820152614e4f60f01b60448201526064015b60405180910390fd5b6001600160a01b0382166102045760405162461bcd60e51b81526020600482015260026024820152615a4160f01b60448201526064016101c0565b6001600160a01b03919091166000908152606a60205260409020805460ff1916911515919091179055565b336000908152606a602052604081205460ff166102735760405162461bcd60e51b81526020600482015260026024820152614e4f60f01b60448201526064016101c0565b6000848152606960205260409020546001600160a01b0316156102be5760405162461bcd60e51b815260206004820152600360248201526244414560e81b60448201526064016101c0565b6000846040516020016102d391815260200190565b60408051601f198184030181529190528051602090910120606554909150600090610307906001600160a01b031683610770565b6000878152606960205260409081902080546001600160a01b0319166001600160a01b038481169182179092556068546066546067549451634df2308160e01b8152600481018d9052918416602483015283166044820152898316606482015288831660848201529290911660a4830152919250634df230819060c401600060405180830381600087803b15801561039e57600080fd5b505af11580156103b2573d6000803e3d6000fd5b5050604080518981526001600160a01b03851660208201527fa88b714561d1cbe42b591c22f733675d5a9014e93f9df37e4c4bf872f716226c935001905060405180910390a195945050505050565b610409610813565b610413600061086d565b565b61041d610813565b6001600160a01b0381166104585760405162461bcd60e51b81526020600482015260026024820152615a4160f01b60448201526064016101c0565b606580546001600160a01b0319166001600160a01b0392909216919091179055565b610482610813565b6001600160a01b0381166104e75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101c0565b6104f08161086d565b50565b600054610100900460ff16158080156105135750600054600160ff909116105b8061052d5750303b15801561052d575060005460ff166001145b6105905760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101c0565b6000805460ff1916600117905580156105b3576000805461ff0019166101001790555b6001600160a01b0385166105ef5760405162461bcd60e51b8152602060048201526003602482015262445a4160e81b60448201526064016101c0565b6001600160a01b03841661062b5760405162461bcd60e51b81526020600482015260036024820152624e5a4160e81b60448201526064016101c0565b6001600160a01b03831661066a5760405162461bcd60e51b81526004016101c09060208082526004908201526344415a4160e01b604082015260600190565b6001600160a01b0382166106a65760405162461bcd60e51b815260206004820152600360248201526244544160e81b60448201526064016101c0565b6106ae6108bf565b606780546001600160a01b038086166001600160a01b0319928316179092556068805485841690831617905560658054888416908316179055606680549287169290911682179055336000908152606a6020526040808220805460ff199081166001908117909255938352912080549092161790558015610769576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760096000f590506001600160a01b03811661080d5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016101c0565b92915050565b6033546001600160a01b031633146104135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c0565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661092a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016101c0565b6104133361086d565b80356001600160a01b038116811461094a57600080fd5b919050565b6000806040838503121561096257600080fd5b61096b83610933565b91506020830135801515811461098057600080fd5b809150509250929050565b6000806000606084860312156109a057600080fd5b833592506109b060208501610933565b91506109be60408501610933565b90509250925092565b6000602082840312156109d957600080fd5b6109e282610933565b9392505050565b6000602082840312156109fb57600080fd5b5035919050565b60008060008060808587031215610a1857600080fd5b610a2185610933565b9350610a2f60208601610933565b9250610a3d60408601610933565b9150610a4b60608601610933565b90509295919450925056fea2646970667358221220064fd6c2551c77d3c4d7b2dfe96850e0c11697504c2f5d933328c0558ba793a064736f6c63430008110033";

type VaultFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VaultFactory__factory extends ContractFactory {
  constructor(...args: VaultFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VaultFactory> {
    return super.deploy(overrides || {}) as Promise<VaultFactory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): VaultFactory {
    return super.attach(address) as VaultFactory;
  }
  override connect(signer: Signer): VaultFactory__factory {
    return super.connect(signer) as VaultFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultFactoryInterface {
    return new utils.Interface(_abi) as VaultFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VaultFactory {
    return new Contract(address, _abi, signerOrProvider) as VaultFactory;
  }
}
